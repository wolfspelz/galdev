@page "{name?}"
@model BlogModel
@inject IUrlHelper UrlHelper
@inject LinkGenerator Links
@{
    ViewData["Active"] = "Blog";

    var ImageBaseUrl = $"{UrlHelper.ActionContext.HttpContext.Request.Scheme}://{UrlHelper.ActionContext.HttpContext.Request.Host}/blog/";

    if (Model.Post != null) {
        ViewData["Title"] = Model.Post.Title;
        ViewData["MetaDescription"] = Model.Post.Summary;
        ViewData["MetaFacebookTitle"] = Model.Post.Title;
        ViewData["MetaFacebookDescription"] = Model.Post.Summary;
        ViewData["MetaFacebookImage"] = ImageBaseUrl + Model.Post.Image;
        ViewData["MetaFacebookImageAlt"] = Model.Post.Title;
        ViewData["MetaTwitterTitle"] = Model.Post.Title;
        ViewData["MetaTwitterDescription"] = Model.Post.Summary;
        ViewData["MetaTwitterImage"] = ImageBaseUrl + Model.Post.Image;
    }
}

@if (Model.Post != null) {

    <div class="row mt-4">
        <div class="col-sm-12 col-lg-8">
            <h1>
                @Model.Post.Title
            </h1>

            <p class="mt-2">
                @Model.Post.Summary
            </p>

            <p class="fst-italic">
                @Model.Post.Time
                @Model.I18n.String(path: "Post/by", i18n: new StringGeneratorI18n { ["de-DE"] = () => "von", ["en-US"] = () => "by" })
                @Model.Post.Author
                @foreach (var tag in Model.Post.Tags) {
                    <span>#@tag</span>
                }
            </p>

            <p class="mt-4 mb-4">
                @if (string.IsNullOrEmpty(Model.Post.Html)) {
                    <img src="@ImageBaseUrl@Model.Post.Image" class="img-fluid gd-blog-post-image" alt="@Model.Post.Title" />
                } else {
                    <text>
                        @Html.Raw(Model.Post.Html)
                    </text>
                }
            </p>

            <p id="iTarget">
                <span id="iSource">@Model.Post.Text</span>
            </p>

        </div>

        <div class="col-sm-0 col-lg-4">

            @{
                var cards = new List<Node>();

                {
                    cards.Add(Node.From(new Dictionary<string, string> {
                        ["Title"] = Model.I18n.String(path: "Box/Posts/Title", i18n: new StringGeneratorI18n {
                            ["de-DE"] = () => "Blog Posts",
                            ["en-US"] = () => "Blog Posts",
                        }),
                        ["Text"] = "<ul>" + string.Join("", Model.Index.Where(p => p.Language == Model.Lang).Select(p => $"<li><a href='{Links.GetPathByPage("/Blog", null, new { name = p.SeoTitle })}'>{p.Title}</a></li>")) + "</ul>",
                    }));
                }

                //{
                //    cards.Add(Node.From(new Dictionary<string, string> {
                //        ["ImgSrc"] = "/images/Index/book.png",
                //        ["ImgAlt"] = "Buch",
                //        ["Link"] = "https://www.amazon.de/dp/1536999199",
                //        ["Title"] = Model.I18n.String(path: "Box/Book/Title", i18n: new StringGeneratorI18n {
                //            ["de-DE"] = () => "Buch",
                //            ["en-US"] = () => "Printed Book",
                //        }),
                //        ["Text"] = Model.I18n.String(path: "Box/Book/Text", i18n: new StringGeneratorI18n {
                //            ["de-DE"] = () => "Galactic Developments als Buch und eBook für alle, die nicht auf Social Networks aktiv sind oder lieber ein Buch in der Hand haben.",
                //            ["en-US"] = () => "Galactic Developments as Buch and eBook (in German).",
                //        }),
                //    }));
                //}

            }

            @{
                ViewData["bootstrap-card-column-spec"] = "col-sm-12";
            }
            @await Html.PartialAsync("_Cards", cards, ViewData)

        </div>
    </div>

} else {

    var cards = new List<Node>();

    foreach (var post in Model.Index.Where(p => p.Language == Model.Lang)) {
        cards.Add(Node.From(new Dictionary<string, string> {
                        ["ImgSrc"] = $"{ImageBaseUrl}{post.Image}",
                        ["ImgAlt"] = post.Title,
                        ["Link"] = Links.GetPathByPage("/Blog", null, new { name = post.SeoTitle }) ?? "",
                        ["Title"] = post.Title,
                        ["TitleHasLink"] = "true",
                        ["Text"] = post.Summary,
                    }));

    }

    <div class="row mt-3">
        <div class="col-12">
            <h1>News</h1>
        </div>
    </div>

    @await Html.PartialAsync("_Cards", cards)

}

@await Html.PartialAsync("_MarkdownConverterPartial")

<div>@ImageBaseUrl</div>

<ul>
    @foreach (var header in UrlHelper.ActionContext.HttpContext.Request.Headers) {
        <li><strong>@header.Key:</strong> @header.Value</li>
    }
</ul>