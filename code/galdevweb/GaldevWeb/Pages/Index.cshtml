@page
@model IndexModel
@{
    var title = @Model.I18n.String(path: "Meta/Title", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "Galactic Developments - Die Geschichte der Zukunft",
                ["en-US"] = () => "Galactic Developments - The History of the Future"
            });
    var description = @Model.I18n.String(path: "Meta/Description", i18n: new StringGeneratorI18n {
        ["de-DE"] = () => "Eine Science Fiction Geschichte der Menschheit von der Besiedlung des Sonnensystems bis zur interstellaren Zivilisation.",
        ["en-US"] = () => "A Science Fiction history of the future from eary settlements in the Solar System to an interstellar civilization"
    });
    var image = @Model.I18n.String(path: "Meta/Image", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "/images/FlyerFront.jpg",
                ["en-US"] = () => "/images/FlyerFront.jpg"
            });
    ViewData["Active"] = "Index";
    ViewData["Title"] = title;
    ViewData["MetaDescription"] = description;
    ViewData["MetaFacebookTitle"] = title;
    ViewData["MetaFacebookDescription"] = description;
    ViewData["MetaFacebookImage"] = image;
    ViewData["MetaFacebookImageAlt"] = title;
    ViewData["MetaTwitterTitle"] = title;
    ViewData["MetaTwitterDescription"] = description;
    ViewData["MetaTwitterImage"] = image;
}

<div class="row mt-5">
    <div class="col-12">
        <h1>
            @Model.I18n.String(path: "Title", i18n: new StringGeneratorI18n {
            ["de-DE"] = () => "Die Geschichte der Zukunft",
            ["en-US"] = () => "The History of the Future"
            })
        </h1>
    </div>
</div>

<div class="row my-3">
    <div class="col-12">
        <h2>
            @Model.I18n.String(path: "SubTitle", i18n: new StringGeneratorI18n {
            ["de-DE"] = () => "Von der Besiedlung des Sonnensystems bis zur interstellaren Zivilisation",
            ["en-US"] = () => "From Early Settlements in the Solar System to an Interstellar Civilization"
            })
        </h2>
    </div>
</div>

<script src="~/lib/masonry-4.2.2.min.js" async></script>
<script src="~/js/masonryAutoRelayout.js" async></script>
@{
    ListGenerator cardsData = () => new List<Node> {

        Node.From(new Dictionary<string, string> {
            ["Title"] = @Model.I18n.String(path: "Box/Historybook/Title", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "Ein Geschichtsbuch",
                ["en-US"] = () => "A History Book",
            }),
            ["Text"] = @Model.I18n.String(path: "Box/Historybook/Text", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "Eine Timeline der Zukunft erzählt in vielen einzelnen Ereignissen, Entdeckungen und Erfindungen aus Technik, Wirtschaft und Gesellschaft.",
                ["en-US"] = () => "A timeline of the future told in many events, discoveries, and inventions in technology, economy, and society.",
            }),
        }),

        Node.From(new Dictionary<string, string> {
            ["Title"] = @Model.I18n.String(path: "Box/HardScifi/Title", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "Hard SciFi",
                ["en-US"] = () => "Hard SciFi"
            }),
            ["Text"] = @Model.I18n.String(path: "Box/HardScifi/Text", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "Basierend auf echter Wissenschaft. Futurologie, realistische Physik, mögliche Technik.",
                ["en-US"] = () => "Based on science. Futuorology, real physics, possible technology."
            }),
        }),

        Node.From(new Dictionary<string, string> {
            ["Title"] = @Model.I18n.String(path: "Box/Interplanetary/Title", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "Interplanetar und interstellar",
                ["en-US"] = () => "Interplanetary and Interstellar"
            }),
            ["Text"] = @Model.I18n.String(path: "Box/Interplanetary/Text", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "Erst besiedelt die Menschheit das eigene Sonnensystem. Eine interplanetare Zivilisation entwickelt sich mit Erfindungen und Entdeckungen, Politik und Intrigen. Machtzentren kommen und gehen.<br /><br />Dann die Sterne. Schon bevor Raumkrümmer-Antriebe richtig schnell sind, gibt es gewagte Missionen und lange Reisen ins Unbekannte. Nicht nur die Menschen schauen sich um. Auch die Umgebung nimmt die Menschen langsam wahr.<br /><br />Später wird die Menschheit in die dramatische Entwicklung ihrer interstellaren Nachbarschaft hineingezogen und lernt auf die harte Tour, dass Stabilität nicht selbstverständlich ist.",
                ["en-US"] = () => "Humanity expands into the Solar System. The interplanetary civilization develops with inventions and discoveries, politics and intrigues. Interplanetary powers come and go.<br /><br />Then the stars. Initially, FTL drives ships are slower than the speed of light and bold missions explore the unknown fringes.<br /><br />Later, humanity is drawn into the dramatic development of its interstellar neighborhood and must learn the hard way, that stability is not a given."
            }),
        }),

        Node.From(new Dictionary<string, string> {
            ["Title"] = @Model.I18n.String(path: "Box/Timeline/Title", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "Die ganze Zeitleiste",
                ["en-US"] = () => "Full Timeline",
            }),
            ["Text"] = @Model.I18n.String(path: "Box/Timeline/Text", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "<a href='List'>Alle vollständigen Artikel als Liste</a>",
                ["en-US"] = () => "<a href='List'>List of complete timeline entries</a>",
            }),
        }),

        Node.From(new Dictionary<string, string> {
            ["Title"] = @Model.I18n.String(path: "Box/Expansion/Title", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "Die grosse Erweiterung",
                ["en-US"] = () => "The great Expansion",
            }),
            ["Text"] = @Model.I18n.String(path: "Box/Expansion/Text", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "Es gibt noch viele kurze Einträge. Viele davon sind tolle Ideen und wichtige Meilensteine der Entwicklung. Sie verdienen mehr Einzelheiten und mehr Liebe. Die ersten Ergebnisse der Erweiterungkampagne:",
                ["en-US"] = () => "There are still lots of small an short entries. The are great ideas and great milestones. They deserve more detail and love. First results of the expansion campaign:",
            })
            + "<br/><br/>"
            + string.Join("<br/>", new [] {
                "1000InSpace",
                "Gemini",
                "AsteroidMining",
                "SpacePatrol",
                "ServizioStazione",
                "EndVenusTerraforming",
                "MoonDeportations",
            }
            .Where(name => Model.Entries.HasEntry(name))
            .Select(name => {
                var entry = Model.Entries.GetEntry(name);
                return $"<a href='/Entry/{entry.SeoTitle}'>{entry.Year} {entry.DisplayName}</a>";
            })),
        }),

        Node.From(new Dictionary<string, string> {
            ["ImgSrc"] = "/Image/" + @Model.Entries.GetEntry("Supernova").Image ?? "",
            ["ImgAlt"] = @Model.Entries.GetEntry("Supernova").DisplayName,
            ["Link"] = "/Entry/" + @Model.Entries.GetEntry("Supernova").SeoTitle,
            ["Text"] = @Model.Entries.GetEntry("Supernova").Summary?? "",
        }),

        Node.From(new Dictionary<string, string> {
            ["Title"] = @Model.I18n.String(path: "Box/New/Title", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "Neue Beiträge",
                ["en-US"] = () => "Latest Articles",
            }),
            ["Text"] = string.Join("<br/>", new [] {
                "Die_erste_Menschheit",
                "QueenMarduk",
                "Quantenkontinuum",
                "100000InSpace",
                "ControversyGate",
                "Flux",
                "SoloEhre",
                "Fragmentierung",
                "Solos",
                "Scale",
                "Sterge",
                "Prophet",
                "ReshumanisCobol",
            }
            .Where(name => Model.Entries.HasEntry(name))
            .Select(name => {
                var entry = Model.Entries.GetEntry(name);
                return $"<a href='/Entry/{entry.SeoTitle}'>{entry.Year} {entry.DisplayName}</a>";
            })),
        }),

        Node.From(new Dictionary<string, string> {
            ["Title"] = @Model.I18n.String(path: "Box/Things/Title", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "100 Dinge",
                ["en-US"] = () => "100 Things",
            }),
            ["Text"] = @Model.I18n.String(path: "Box/Things/Text", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "Die Dinge mit denen wir täglich umgehen, prägen unseren Alltag. Sie sind oft charakteristisch für ihre Zeit. Sie zeigen, wie die Menschen leben und was gerade aktuell ist. Eigentlich sind sie uns viel näher als Nachrichtenmeldungen, Geschichtsbucheinträge und die große Politik. Deshalb will ich 100 Objekte aus den nächsten 1000 Jahren vorstellen. Auch wenn das nicht immer Alltagsgegenstände sind. Highlights:",
                ["en-US"] = () => "The things we deal with on a daily basis shape our everyday life. They are often characteristic of their time. They show how people live and what's important to them. In fact, they are much closer to us than news reports, history book entries, and grand politics. That's why I want to show 100 objects from the next 1000 years, even if they are not always everyday items. Highlights:",
            })
            + "<br/><br/>"
            + string.Join("<br/>", new [] {
                "NeuroImplant",
                "DoomsdayCocktail",
                "DeliveryBot",
                "CodingKit",
                "Fusang",
                "Kartusche",
                "Drachenlegenden",
            }
            .Where(name => Model.Entries.HasEntry(name))
            .Select(name => {
                var entry = Model.Entries.GetEntry(name);
                return $"<a href='/Entry/{entry.SeoTitle}'>{entry.Year} {entry.DisplayName}</a>";
            })),
        }),

        Node.From(new Dictionary<string, string> {
            ["ImgSrc"] = "/images/book.png",
            ["ImgAlt"] = "Buch",
            ["Link"] = "https://www.amazon.de/dp/1536999199",
            ["Title"] = @Model.I18n.String(path: "Box/Book/Title", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "Buch",
                ["en-US"] = () => "Book",
            }),
            ["Text"] = @Model.I18n.String(path: "Box/Book/Text", i18n: new StringGeneratorI18n {
                ["de-DE"] = () => "Galactic Developments als Buch und eBook für alle, die nicht auf Social Networks aktiv sind oder lieber ein Buch in der Hand haben.",
                ["en-US"] = () => "Galactic Developments as Buch and eBook (in German).",
            }),
        }),

        Node.From(new Dictionary<string, string> {
            ["ImgSrc"] = "/Image/" + @Model.Entries.GetEntry("Gee").Image ?? "",
            ["ImgAlt"] = @Model.Entries.GetEntry("Gee").DisplayName,
            ["Link"] = "/Entry/" + @Model.Entries.GetEntry("Gee").SeoTitle,
            ["Text"] = @Model.Entries.GetEntry("Gee").Summary?? "",
        }),

    };
}

<div class="row" data-masonry='{ "percentPosition": true, "isLayoutInstant": true }'>
    @{
        var cardsCnt = 0;
    }
    @foreach (var card in Model.I18n.List(path: "Cards", data: cardsData)) {
        cardsCnt++;
        <div class="col-sm-6 col-lg-4 my-2">
            <div class="card">
                @if (@card["ImgSrc"].String != "") {
                    @if (@card["Link"].String != "") {
                        <a href="@card["Link"].String"><img class="card-img-top" src="@card["ImgSrc"]" data-toggle="modal" data-target="#iCard@(cardsCnt)"></a>
                    } else {
                        <img class="card-img-top" src="@card["ImgSrc"]" data-toggle="modal" data-target="#iCard@(cardsCnt)">
                    }
                    <div id="iCard@(cardsCnt)" class="modal fade" tabindex="-1" role="dialog">
                        <div class="modal-dialog modal-dialog-centered" style="max-width: 800px;">
                            <div class="modal-content">
                                <div class="modal-body">
                                    <img src="@card["ImgSrc"]" alt="@card["ImgAlt"]" class="img-fluid">
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <div class="card-body">
                    @if (@card["Title"].String != "") {
                        <h5 class="card-title">@card["Title"]</h5>
                    }
                    <p>@Html.Raw(card["Text"])</p>
                </div>
            </div>
        </div>
    }
</div>
