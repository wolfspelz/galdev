@page "{name?}"
@model TimelineModel
@{
    ViewData["Active"] = "Timeline";

    if (!Model.NotAvailable) {
        var firstEntry = Model.List[0];
        ViewData["Title"] = firstEntry.Title;
        ViewData["MetaDescription"] = firstEntry.Summary;
        ViewData["MetaFacebookTitle"] = firstEntry.Title;
        ViewData["MetaFacebookDescription"] = firstEntry.Summary;
        ViewData["MetaFacebookImage"] = "/Image/" + firstEntry.Image;
        ViewData["MetaFacebookImageAlt"] = firstEntry.Title;
        ViewData["MetaTwitterTitle"] = firstEntry.Title;
        ViewData["MetaTwitterDescription"] = firstEntry.Summary;
        ViewData["MetaTwitterImage"] = "/Image/" + firstEntry.Image;
    }
}

@if (Model.NotAvailable) {

    <div class="row mt-3">
        <div class="col-12">
            <h3>
                Not available in this language
            </h3>
        </div>
    </div>

} else {

    <div class="row mt-3"></div>

    <div class="row mt-3 gd-entry">
        <div class="col-sm-12 col-lg-8">
            @foreach (var entry in Model.List) {

                <h3 class="gd-entry-headline">
                    @*                    <a asp-page="/Timeline" asp-route-name="@entry.SeoTitle">*@
                    <span class="gd-entry-year">@entry.Year</span> <span class="gd-entry-title">@entry.Title</span>
                    @*                    </a>*@
                </h3>

                @if (!string.IsNullOrEmpty(entry.Image)) {
                    <img src="/Image/@entry.Image" class="gd-entry-image float-end img-fluid mb-3" />

                    <div class="modal fade" role="dialog" id="iModalDialog">
                        <div class="modal-dialog modal-xl">
                            <div class="modal-content">
                                <img class="img-responsive" src="" id="iModalDialogImage" />
                            </div>
                        </div>
                    </div>
                }

                @foreach (var t in entry.Text) {
                    <p class="gd-entry-text">@t</p>
                }
            }
        </div>

        <div class="col-sm-0 col-lg-4">

            <script src="~/lib/masonry-4.2.2.min.js" async></script>
            <script src="~/js/masonryAutoRelayout.js" async></script>
            @{
                var cards = new List<Node>();

                if (Model.List[0].Topics.Length > 0) {
                    var topic = Model.List[0].Topics[0];
                    cards.Add(Node.From(new Dictionary<string, string> {
                        ["Title"] = Model.Series.GetTitleOfTopic(topic),
                        ["Text"] = string.Join("<br/>",
                    Model.Series.GetEntriesOfTopic(topic)
                    .Select(entry => $"<a href='{Model.Links.GetPathByPage("/Timeline", null, new { name = entry.SeoTitle })}'>{entry.Year} {entry.DisplayName}</a>")
                    )
                    }));
                }

                {
                    cards.Add(Node.From(new Dictionary<string, string> {
                        ["Title"] = Model.I18n.String(path: "Box/New/Title", i18n: new StringGeneratorI18n {
                            ["de-DE"] = () => "Neue Beiträge",
                            ["en-US"] = () => "Latest Articles",
                        }),
                        ["Text"] = string.Join("<br/>", new[] {
        "Die_erste_Menschheit",
        "QueenMarduk",
        "Quantenkontinuum",
        "100000InSpace",
        "ControversyGate",
        "Flux",
        "SoloEhre",
        "Fragmentierung",
        "Solos",
        "Scale",
        "Sterge",
        "Prophet",
        "ReshumanisCobol",
        }
                    .Where(name => Model.Series.HasEntry(name))
                    .Select(name => {
                        var e = Model.Series.GetEntry(name);
                        return $"<a href='{Model.Links.GetPathByPage("/Timeline", null, new { name = e?.SeoTitle })}'>{e?.Year} {e?.DisplayName}</a>";
                    })),
                    }));
                }

                {
                    cards.Add(Node.From(new Dictionary<string, string> {
                        ["Title"] = Model.I18n.String(path: "Box/Expansion/Title", i18n: new StringGeneratorI18n {
                            ["de-DE"] = () => "Die grosse Erweiterung",
                            ["en-US"] = () => "The great Expansion",
                        }),
                        ["Text"] = Model.I18n.String(path: "Box/Expansion/Text", i18n: new StringGeneratorI18n {
                            ["de-DE"] = () => "Es gibt noch viele kurze Einträge. Viele davon sind tolle Ideen und wichtige Meilensteine der Entwicklung. Sie verdienen mehr Einzelheiten und mehr Liebe. Die ersten Ergebnisse der Erweiterungkampagne:",
                            ["en-US"] = () => "There are still lots of small an short entries. The are great ideas and great milestones. They deserve more detail and love. First results of the expansion campaign:",
                        })
                    + "<br/><br/>"
                    + string.Join("<br/>", new[] {
        "1000InSpace",
        "Gemini",
        "AsteroidMining",
        "SpacePatrol",
        "ServizioStazione",
        "EndVenusTerraforming",
        "MoonDeportations",
                    }
                    .Where(name => Model.Series.HasEntry(name))
                    .Select(name => {
                        var e = Model.Series.GetEntry(name);
                        return $"<a href='{Model.Links.GetPathByPage("/Timeline", null, new { name = e?.SeoTitle })}'>{e?.Year} {e?.DisplayName}</a>";
                    })),
                    }));
                }

                {
                    cards.Add(Node.From(new Dictionary<string, string> {
                        ["ImgSrc"] = "/images/Index/book.png",
                        ["ImgAlt"] = "Buch",
                        ["Link"] = "https://www.amazon.de/dp/1536999199",
                        ["Title"] = Model.I18n.String(path: "Box/Book/Title", i18n: new StringGeneratorI18n {
                            ["de-DE"] = () => "Buch",
                            ["en-US"] = () => "Printed Book",
                        }),
                        ["Text"] = Model.I18n.String(path: "Box/Book/Text", i18n: new StringGeneratorI18n {
                            ["de-DE"] = () => "Galactic Developments als Buch und eBook für alle, die nicht auf Social Networks aktiv sind oder lieber ein Buch in der Hand haben.",
                            ["en-US"] = () => "Galactic Developments as Buch and eBook (in German).",
                        }),
                    }));
                }

            }
            <div class="row" data-masonry='{ "percentPosition": true, "isLayoutInstant": true }'>
                @{
                    var cardsCnt = 0;
                }
                @foreach (var card in cards) {
                    cardsCnt++;
                    <div class="col-sm-12 my-2">
                        <div class="card">
                            @if (@card["ImgSrc"].String != "") {
                                @if (@card["Link"].String != "") {
                                    <a href="@card["Link"].String"><img class="card-img-top" src="@card["ImgSrc"]" data-toggle="modal" data-target="#iCard@(cardsCnt)"></a>
                                } else {
                                    <img class="card-img-top" src="@card["ImgSrc"]" data-toggle="modal" data-target="#iCard@(cardsCnt)">
                                }
                                <div id="iCard@(cardsCnt)" class="modal fade" tabindex="-1" role="dialog">
                                    <div class="modal-dialog modal-dialog-centered" style="max-width: 800px;">
                                        <div class="modal-content">
                                            <div class="modal-body">
                                                <img src="@card["ImgSrc"]" alt="@card["ImgAlt"]" class="img-fluid">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            <div class="card-body">
                                @if (@card["Title"].String != "") {
                                    <h5 class="card-title">@card["Title"]</h5>
                                }
                                <p>@Html.Raw(card["Text"])</p>
                            </div>
                        </div>
                    </div>
                }
            </div>

        </div>

    </div>

    @if (Model.NextEntry != null) {
        <div class="row mt-3 mb-3">
            <div class="col-12">
                <a asp-page="/Timeline" asp-route-name="@Model.NextEntry.SeoTitle">
                    <img src="~/images/Timeline/next.png" alt="next" class="gd-timeline-next gd-timeline-next-left" />

                    @Model.NextEntry.Year
                    @Model.NextEntry.DisplayName

                    <img src="~/images/Timeline/next.png" alt="next" class="gd-timeline-next gd-timeline-next-right" />
                </a>
            </div>
        </div>
    }
}

@section Scripts {
    <script>
        $(document).ready(function () {
            $('.gd-entry-image').click(function () {
                var src = $(this).attr('src');
                $('#iModalDialogImage').attr('src', src);
                $('#iModalDialog').modal('show');
            });
        });
    </script>
}