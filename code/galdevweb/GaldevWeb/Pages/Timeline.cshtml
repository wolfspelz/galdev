@page "{name?}"
@using Markdig
@model TimelineModel
@inject IUrlHelper UrlHelper
@inject LinkGenerator Links
@{
    ViewData["Active"] = "Timeline";

    var BaseUrl = $"{UrlHelper.ActionContext.HttpContext.Request.Headers["X-Forwarded-Proto"].FirstOrDefault() ?? UrlHelper.ActionContext.HttpContext.Request.Scheme}://{UrlHelper.ActionContext.HttpContext.Request.Host}";

    if (Model.NotAvailable) {
        //
    } else {
        var firstEntry = Model.List[0];
        ViewData["Title"] = firstEntry.Title;
        ViewData["MetaDescription"] = firstEntry.Summary;
        ViewData["MetaFacebookTitle"] = firstEntry.Title;
        ViewData["MetaFacebookDescription"] = firstEntry.Summary;
        ViewData["MetaFacebookImage"] = BaseUrl + "/Image/" + firstEntry.Image;
        ViewData["MetaFacebookImageAlt"] = firstEntry.Title;
        ViewData["MetaTwitterTitle"] = firstEntry.Title;
        ViewData["MetaTwitterDescription"] = firstEntry.Summary;
        ViewData["MetaTwitterImage"] = BaseUrl + "/Image/" + firstEntry.Image;
    }
}

@if (Model.NotAvailable) {

    <div class="row mt-3">
        <div class="col-12">
            <p>
                @Model.I18n.String(path: "SwitchLanguage", i18n: new StringGeneratorI18n {
            ["de-DE"] = () => "Nicht verfügbar in der eingestellten Sprache. Sprache wechseln?",
            ["en-US"] = () => "Not available in this language. You might want to switch the display language?",
            })
                @await Html.PartialAsync("_SelectLanguagePartial")
            </p>
        </div>
    </div>

} else {

    @if (Model.PreviousEntry != null) {
        <div class="row mt-3">
            <div class="col-12">
                <a asp-page="/Timeline" asp-route-name="@Model.PreviousEntry.SeoTitle">
                    <img src="~/images/Timeline/previous.png" alt="next" class="gd-timeline-previous gd-timeline-previous-left" />

                    @Model.PreviousEntry.Year
                    @Model.PreviousEntry.DisplayName
                </a>
            </div>
        </div>
    }

    <div class="row gd-entry">
        <div class="col-sm-12 col-lg-8">
            @foreach (var entry in Model.List) {

                <h3 class="gd-entry-headline">
                    <a asp-page="/Timeline" asp-route-name="@entry.SeoTitle">
                        <span class="gd-entry-year">@entry.Year</span>
                    </a>
                    <span class="gd-entry-title">@entry.Title</span>
                    <a asp-page="/Timeline" asp-route-name="@entry.SeoTitle" asp-route-lang="@Model.UiCultureName">
                        <span class="gd-icon gd-lang-icon"></span>
                    </a>
                    <a href="@Model.Config.GitHubProjectDataBaseUrl/data/@Model.Lang/@entry.Filename">
                        <span class="gd-icon gd-code-icon"></span>
                    </a>

                </h3>

                @if (!string.IsNullOrEmpty(entry.Image)) {
                    <img src="/Image/@entry.Image" class="gd-entry-image float-end img-fluid mb-3" />

                    <div class="modal fade" role="dialog" id="iModalDialog">
                        <div class="modal-dialog modal-xl">
                            <div class="modal-content">
                                <img class="img-responsive" src="" id="iModalDialogImage" />
                            </div>
                        </div>
                    </div>
                }

                @foreach (var t in entry.Text) {
                    var text = "";
                    if (string.IsNullOrEmpty(Model.Term)) {
                        text = t;
                    } else {
                        text = t.Replace(Model.Term, $"<a name='{Model.Term}'></a><span class='gd-hilite-term'>{Model.Term}</span>");
                    }
                    @Html.Raw(Markdown.ToHtml(text))
                }
            }
        </div>

        <div class="col-sm-0 col-lg-4">

            <script src="~/lib/masonry-4.2.2.min.js" async></script>
            <script src="~/js/masonryAutoRelayout.js" async></script>
            @{
                var cards = new List<Node>();

                if (Model.List[0].Topics.Length > 0) {
                    var topic = Model.List[0].Topics[0];
                    cards.Add(Node.From(new Dictionary<string, string> {
                        ["Title"] = Model.I18n.String(path: "Box/Other/Prefix", i18n: new StringGeneratorI18n {
                            ["de-DE"] = () => "Mehr ",
                            ["en-US"] = () => "Other ",
                        }) + Model.Timeline.GetTitleOfTopic(topic),
                        ["Text"] = string.Join("<br/>",
                    Model.Timeline.GetEntriesOfTopic(topic)
                    .Select(entry => $"<a href='{Links.GetPathByPage("/Timeline", null, new { name = entry?.SeoTitle })}' data-image='{entry?.Image}'>{entry?.Year} {entry?.DisplayName}</a>")
                    )
                    }));
                }

                {
                    cards.Add(Node.From(new Dictionary<string, string> {
                        ["Title"] = Model.I18n.String(path: "Box/New/Title", i18n: new StringGeneratorI18n {
                            ["de-DE"] = () => "Neue Beiträge",
                            ["en-US"] = () => "Latest Articles",
                        }),
                        ["Text"] = string.Join("<br/>",
                    Model.Timeline.GetFilteredList(entry => entry.Tags.Contains("_new"))
                    .OrderByDescending(entry => entry.ChangedDate)
                    .Take(Model.Config.IndexListLimit)
                    .Select(entry => {
                        return $"<a href='{Links.GetPathByPage("/Timeline", null, new { name = entry?.SeoTitle })}' data-image='{entry?.Image}'>{entry?.Year} {entry?.DisplayName}</a>";
                    })),
                    }));
                }

                {
                    var randomizedList = Model.Timeline.GetFilteredList(entry => entry.Tags.Contains("_hilite")).OrderBy(a => Guid.NewGuid());
                    var len = randomizedList.Count();
                    cards.Add(Node.From(new Dictionary<string, string> {
                                ["Title"] = Model.I18n.String(path: "Box/New/Title", i18n: new StringGeneratorI18n {
                                    ["de-DE"] = () => "Die Besten",
                                    ["en-US"] = () => "Absolute Highlights",
                                }),
                                ["Id"] = "id-Highlights",
                                ["Anchor"] = "Highlights",
                                ["Text"] = Model.I18n.String(path: "Box/New/Text", i18n: new StringGeneratorI18n {
                                    ["de-DE"] = () => $"({Model.Config.IndexListLimit} von {len})",
                                    ["en-US"] = () => $"({Model.Config.IndexListLimit} of {len})",
                                }) + "<br/>" +
                                string.Join("<br/>",
                                    randomizedList
                                    .Take(Model.Config.IndexListLimit)
                                    .OrderBy(entry => entry.Year)
                                    .Select(entry => {
                                        return $"<a href='{Links.GetPathByPage("/Timeline", null, new { name = entry?.SeoTitle })}' data-image='{entry?.Image}'>{entry?.Year} {entry?.DisplayName}</a>";
                                    })),
                            }));
                }

                if (Model.UiCultureName == "de-DE") {
                    cards.Add(Node.From(new Dictionary<string, string> {
                                ["ImgSrc"] = "/images/Index/book-serie.png",
                                ["ImgAlt"] = Model.I18n.String(path: "Box/Book/ImgAlt", i18n: new StringGeneratorI18n {
                                    ["de-DE"] = () => "Buchserie",
                                    ["en-US"] = () => "(upcoming)",
                                }),
                                ["Link"] = Model.I18n.String(path: "Box/Book/Link", i18n: new StringGeneratorI18n {
                                    ["de-DE"] = () => "https://www.amazon.de/-/de/dp/B0DJM967TV",
                                    ["en-US"] = () => "(upcoming)",
                                }),
                                ["Title"] = Model.I18n.String(path: "Box/Book/Title", i18n: new StringGeneratorI18n {
                                    ["de-DE"] = () => "Als Buchreihe",
                                    ["en-US"] = () => "(upcoming)",
                                }),
                                ["TitleHasLink"] = "true",
                                ["Text"] = Model.I18n.String(path: "Box/Book/Text", i18n: new StringGeneratorI18n {
                                    ["de-DE"] = () => "Ein Buch pro Zeitalter:\n<dl>" + string.Join("\n", new Dictionary<string, string> {
                                        ["Aufbruch ins Sonnensystem (2050 - 2280)"] = "https://www.amazon.de/-/de/gp/product/B0DJC38SSW",
                                        ["Interplanetare Zivilisation (2280 - 2570)"] = "https://www.amazon.de/-/de/gp/product/B0DHW4636N",
                                        ["Ruf der Sterne (2570 - 2850)"] = "https://www.amazon.de/-/de/gp/product/B0DJCPDMKB",
                                        ["Sturm im Sonnensystem (2850 - 3180)"] = "https://www.amazon.de/-/de/gp/product/B0DJLTXD41",
                                        ["Imperium aus der Asche (3180 - 3370)"] = "https://www.amazon.de/-/de/gp/product/B0DJLV5CZQ",
                                    }.Select(kv => $"<dd><a href='{kv.Value}'>{kv.Key}</a></dd>")) + "</dl>",
                                    ["en-US"] = () => "(upcoming)",
                                }),
                            }));
                } else {
                    cards.Add(Node.From(new Dictionary<string, string> {
                        ["ImgSrc"] = "/images/Index/book.png",
                        ["ImgAlt"] = "Buch",
                        ["Link"] = "https://www.amazon.de/dp/1536999199",
                        ["Title"] = Model.I18n.String(path: "Box/Book/Title", i18n: new StringGeneratorI18n {
                            ["de-DE"] = () => "Buch",
                            ["en-US"] = () => "Printed Book",
                        }),
                        ["Text"] = Model.I18n.String(path: "Box/Book/Text", i18n: new StringGeneratorI18n {
                            ["de-DE"] = () => "Galactic Developments als Buch und eBook für alle, die nicht auf Social Networks aktiv sind oder lieber ein Buch in der Hand haben.",
                            ["en-US"] = () => "Galactic Developments as Buch and eBook (in German).",
                        }),
                    }));
                }

            }

            @{
                ViewData["bootstrap-card-column-spec"] = "col-sm-12";
            }
            @await Html.PartialAsync("_Cards", cards, ViewData)

        </div>

        @if (Model.NextEntry != null) {
            <div class="row mt-3 mb-3">
                <div class="col-12">
                    <a asp-page="/Timeline" asp-route-name="@Model.NextEntry.SeoTitle">
                        <img src="~/images/Timeline/next.png" alt="next" class="gd-timeline-next gd-timeline-next-left" />

                        @Model.NextEntry.Year
                        @Model.NextEntry.DisplayName

                        @*<img src="~/images/Timeline/next.png" alt="next" class="gd-timeline-next gd-timeline-next-right" />*@
                    </a>
                </div>
            </div>
        }

    </div>
}

@section Scripts {
    <script>
        $(document).ready(function () {
            $('.gd-entry-image').click(function () {
                var src = $(this).attr('src');
                $('#iModalDialogImage').attr('src', src);
                $('#iModalDialog').modal('show');
            });

            $(document).keydown(function (e) {
                if (e.key === "Escape") {
                    $('#iModalDialog').modal('hide');
                }
            });
        });

        document.addEventListener("DOMContentLoaded", initializeImagePreview);
    </script>
}
